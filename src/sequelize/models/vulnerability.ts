import * as Sequelize from '@sequelize/core';
import { DataTypes, Model } from '@sequelize/core';
import type { user_identify, user_identifyId } from './user_identify';

export interface vulnerabilityAttributes {
  id: number;
  irregular_ocupation: boolean;
  alone_child: boolean;
  dependent_elderly: boolean;
  unemployed: boolean;
  deficient: boolean;
  low_income: boolean;
  others: boolean;
}

export type vulnerabilityPk = "id";
export type vulnerabilityId = vulnerability[vulnerabilityPk];
export type vulnerabilityOptionalAttributes = "id" | "irregular_ocupation" | "alone_child" | "dependent_elderly" | "unemployed" | "deficient" | "low_income" | "others";
export type vulnerabilityCreationAttributes = Sequelize.InferCreationAttributes<vulnerability>;

export class vulnerability extends Model<vulnerabilityAttributes, vulnerabilityCreationAttributes> implements vulnerabilityAttributes {
  id!: number;
  irregular_ocupation!: boolean;
  alone_child!: boolean;
  dependent_elderly!: boolean;
  unemployed!: boolean;
  deficient!: boolean;
  low_income!: boolean;
  others!: boolean;

  // vulnerability hasMany user_identify via vulnerability_fk
  user_identifies!: user_identify[];
  getUser_identifies!: Sequelize.HasManyGetAssociationsMixin<user_identify>;
  setUser_identifies!: Sequelize.HasManySetAssociationsMixin<user_identify, user_identifyId>;
  addUser_identify!: Sequelize.HasManyAddAssociationMixin<user_identify, user_identifyId>;
  addUser_identifies!: Sequelize.HasManyAddAssociationsMixin<user_identify, user_identifyId>;
  createUser_identify!: Sequelize.HasManyCreateAssociationMixin<user_identify>;
  removeUser_identify!: Sequelize.HasManyRemoveAssociationMixin<user_identify, user_identifyId>;
  removeUser_identifies!: Sequelize.HasManyRemoveAssociationsMixin<user_identify, user_identifyId>;
  hasUser_identify!: Sequelize.HasManyHasAssociationMixin<user_identify, user_identifyId>;
  hasUser_identifies!: Sequelize.HasManyHasAssociationsMixin<user_identify, user_identifyId>;
  countUser_identifies!: Sequelize.HasManyCountAssociationsMixin<user_identify>;

  static initModel(sequelize: Sequelize.Sequelize): typeof vulnerability {
    return vulnerability.init({
    id: {
      autoIncrement: true,
      type: DataTypes.INTEGER,
      allowNull: false,
      primaryKey: true
    },
    irregular_ocupation: {
      type: DataTypes.BOOLEAN,
      allowNull: false,
      defaultValue: 0
    },
    alone_child: {
      type: DataTypes.BOOLEAN,
      allowNull: false,
      defaultValue: 0
    },
    dependent_elderly: {
      type: DataTypes.BOOLEAN,
      allowNull: false,
      defaultValue: 0
    },
    unemployed: {
      type: DataTypes.BOOLEAN,
      allowNull: false,
      defaultValue: 0
    },
    deficient: {
      type: DataTypes.BOOLEAN,
      allowNull: false,
      defaultValue: 0
    },
    low_income: {
      type: DataTypes.BOOLEAN,
      allowNull: false,
      defaultValue: 0
    },
    others: {
      type: DataTypes.BOOLEAN,
      allowNull: false,
      defaultValue: 0
    }
  }, {
    sequelize,
    tableName: 'vulnerability',
    timestamps: false,
    indexes: [
      {
        name: "PRIMARY",
        unique: true,
        using: "BTREE",
        fields: [
          { name: "id" },
        ]
      },
    ]
  });
  }
}
