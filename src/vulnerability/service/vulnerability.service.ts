import { HttpException, HttpStatus, Injectable } from '@nestjs/common';
import { CreateVulnerabilityDto } from '../dto/create-vulnerability.dto';
import { UpdateVulnerabilityDto } from '../dto/update-vulnerability.dto';
import { Request } from 'express';
import { vulnerability } from '@prisma/client';
import { PrismaService } from 'src/prisma/prisma.service';

@Injectable()
export class VulnerabilityService {
  constructor(private readonly prismaService: PrismaService) {}

  async create(
    request: Request,
    createVulnerability: CreateVulnerabilityDto,
  ): Promise<vulnerability> {
    const createdVulnerability = await this.prismaService.vulnerability.create({
      data: {
        ...createVulnerability,
        edcenso_city: {
          connect: {
            id: request.user.edcenso_city_fk,
          },
        },
      },
    });

    return createdVulnerability;
  }

  async findAll(request: Request): Promise<vulnerability[]> {
    const allVulnerability = await this.prismaService.vulnerability.findMany({
      where: {
        edcenso_city_fk: request.user.edcenso_city_fk,
      },
    });

    return allVulnerability;
  }

  async findOne(request: Request, id: string): Promise<vulnerability> {
    const vulnerability = await this.prismaService.vulnerability.findUnique({
      where: {
        id: +id,
        edcenso_city_fk: request.user.edcenso_city_fk,
      },
    });

    if (!vulnerability) {
      throw new HttpException('Vulnerability not found', HttpStatus.NOT_FOUND);
    }

    return vulnerability;
  }

  async update(
    request: Request,
    id: string,
    UpdateVulnerabilityDto: UpdateVulnerabilityDto,
  ) {
    await this.findOne(request, id);

    const vulnerabilityUpdated = await this.prismaService.vulnerability.update({
      where: { id: +id },
      data: {
        ...UpdateVulnerabilityDto,
        edcenso_city: {
          connect: {
            id: request.user.edcenso_city_fk,
          },
        },
      },
    });

    return vulnerabilityUpdated;
  }

  async remove(request: Request, id: string) {
    await this.findOne(request, id);

    const vulnerabilityDeleted = await this.prismaService.vulnerability.delete({
      where: { id: +id },
    });

    return vulnerabilityDeleted;
  }
}
