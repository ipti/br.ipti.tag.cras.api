import { HttpException, HttpStatus, Injectable } from '@nestjs/common';
import { vulnerability as Vulnerability } from '../../sequelize/models/vulnerability';
import { CreateVulnerabilityDto } from '../dto/create-vulnerability.dto';
import { UpdateVulnerabilityDto } from '../dto/update-vulnerability.dto';

@Injectable()
export class VulnerabilityService {
  async create(
    request: Request,
    createVulnerability: CreateVulnerabilityDto,
  ): Promise<Vulnerability> {
    const dbName = request['dbName'];

    const createdVulnerability = await Vulnerability.withSchema(dbName).create({
      ...createVulnerability,
    });

    return createdVulnerability;
  }

  async findAll(request: Request): Promise<Vulnerability[]> {
    const dbName = request['dbName'];

    const allVulnerability = await Vulnerability.withSchema(dbName).findAll();

    return allVulnerability;
  }

  async findOne(request: Request, id: string): Promise<Vulnerability> {
    const dbName = request['dbName'];

    const vulnerability = await Vulnerability.withSchema(dbName).findByPk(+id);

    if (!vulnerability) {
      throw new HttpException('Vulnerability not found', HttpStatus.NOT_FOUND);
    }

    return vulnerability;
  }

  async update(
    request: Request,
    id: string,
    UpdateVulnerabilityDto: UpdateVulnerabilityDto,
  ) {
    const dbName = request['dbName'];

    await this.findOne(request, id);

    const vulnerabilityUpdated = await Vulnerability.withSchema(dbName).update(
      {
        ...UpdateVulnerabilityDto,
      },
      {
        where: { id: +id },
      },
    );

    return vulnerabilityUpdated;
  }

  async remove(request: Request, id: string) {
    await this.findOne(request, id);

    const dbName = request['dbName'];

    const vulnerabilityDeleted = await Vulnerability.withSchema(dbName).destroy({
      where: { id: +id },
    });

    return vulnerabilityDeleted;
  }
}
