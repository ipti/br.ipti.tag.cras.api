import * as Sequelize from 'sequelize';
import { DataTypes, Model, Optional } from 'sequelize';
import { identificacao_usuario, identificacao_usuarioId } from '../../userIdentify/model/userIdentify.model';

export interface vulnerabilidadeAttributes {
  id: number;
  ocupacao_irregular: number;
  crianca_sozinha: number;
  idosos_dependentes: number;
  desempregados: number;
  deficientes: number;
  baixa_renda: number;
  outros: number;
}

export type vulnerabilidadePk = "id";
export type vulnerabilidadeId = vulnerabilidade[vulnerabilidadePk];
export type vulnerabilidadeOptionalAttributes = "id";
export type vulnerabilidadeCreationAttributes = Optional<vulnerabilidadeAttributes, vulnerabilidadeOptionalAttributes>;

export class vulnerabilidade extends Model<vulnerabilidadeAttributes, vulnerabilidadeCreationAttributes> implements vulnerabilidadeAttributes {
  id!: number;
  ocupacao_irregular!: number;
  crianca_sozinha!: number;
  idosos_dependentes!: number;
  desempregados!: number;
  deficientes!: number;
  baixa_renda!: number;
  outros!: number;

  // vulnerabilidade hasOne identificacao_usuario via id_vulnerabilidade
  identificacao_usuario!: identificacao_usuario;
  getIdentificacao_usuario!: Sequelize.HasOneGetAssociationMixin<identificacao_usuario>;
  setIdentificacao_usuario!: Sequelize.HasOneSetAssociationMixin<identificacao_usuario, identificacao_usuarioId>;
  createIdentificacao_usuario!: Sequelize.HasOneCreateAssociationMixin<identificacao_usuario>;

  static initModel(sequelize: Sequelize.Sequelize): typeof vulnerabilidade {

    const model =  vulnerabilidade.init({
    id: {
      autoIncrement: true,
      type: DataTypes.INTEGER,
      allowNull: false,
      primaryKey: true
    },
    ocupacao_irregular: {
      type: DataTypes.INTEGER,
      allowNull: false
    },
    crianca_sozinha: {
      type: DataTypes.INTEGER,
      allowNull: false
    },
    idosos_dependentes: {
      type: DataTypes.INTEGER,
      allowNull: false
    },
    desempregados: {
      type: DataTypes.INTEGER,
      allowNull: false
    },
    deficientes: {
      type: DataTypes.INTEGER,
      allowNull: false
    },
    baixa_renda: {
      type: DataTypes.INTEGER,
      allowNull: false
    },
    outros: {
      type: DataTypes.INTEGER,
      allowNull: false
    }
  }, {
    sequelize,
    tableName: 'vulnerabilidade',
    timestamps: false,
    indexes: [
      {
        name: "PRIMARY",
        unique: true,
        using: "BTREE",
        fields: [
          { name: "id" },
        ]
      },
    ]
  });

  // vulnerabilidade.initModel(sequelize)
  // vulnerabilidade.hasOne(identificacao_usuario, {
  //   as: "identificacao_usuario",
  //   foreignKey: "id_vulnerabilidade",
  //   sourceKey: "id"
  // });

  return model;
  }
}
