// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider   = "prisma-client-js"
  engineType = "binary"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user_identify {
  id                Int          @id @default(autoincrement())
  family_fk         Int?
  edcenso_city_fk   Int
  name              String
  surname           String?
  folder            String?
  archive           String?
  number            String?
  birthday          String?
  birth_certificate Int?
  nis               Int?
  rg_number         String?
  rg_date_emission  String?
  uf_rg             String?
  emission_rg       String?
  cpf               String
  is_deficiency     Boolean
  deficiency        String?
  filiation_1       String
  filiation_2       String?
  marital_status    String
  escolarity        String
  initial_date      String
  final_date        String?
  profission        String?
  signed_portfolio  Boolean?
  nuclear_family    String?
  income            Int          @default(0)
  kinship           Kinship
  family            family?      @relation(fields: [family_fk], references: [id])
  edcenso_city      edcenso_city @relation(fields: [edcenso_city_fk], references: [id])
  attendances       attendance[]
}

model family {
  id                       Int               @id @default(autoincrement())
  edcenso_city_fk          Int
  family_representative_fk Int
  address_fk               Int
  attendance_unity_fk      Int
  vulnerability_fk         Int
  edcenso_city             edcenso_city      @relation(fields: [edcenso_city_fk], references: [id])
  address                  address           @relation(fields: [address_fk], references: [id])
  attendance_unity         attendance_unity  @relation(fields: [attendance_unity_fk], references: [id])
  vulnerability            vulnerability     @relation(fields: [vulnerability_fk], references: [id])
  user_identify            user_identify[]
  benefits                 family_benefits[]
}

model address {
  id                Int               @id @default(autoincrement())
  edcenso_uf_fk     Int
  edcenso_city_fk   Int
  address           String
  telephone         String
  reference         String?
  conditions        String
  construction_type String
  rooms             Int
  rent_value        Int
  edcenso_uf        edcenso_uf        @relation(fields: [edcenso_uf_fk], references: [id])
  edcenso_city      edcenso_city      @relation(fields: [edcenso_city_fk], references: [id])
  family            family[]
  attendance_unity  attendance_unity?
}

model vulnerability {
  id                  Int          @id @default(autoincrement())
  edcenso_city_fk     Int
  irregular_ocupation Boolean      @default(false)
  alone_child         Boolean      @default(false)
  dependent_elderly   Boolean      @default(false)
  unemployed          Boolean      @default(false)
  deficient           Boolean      @default(false)
  low_income          Boolean      @default(false)
  others              Boolean      @default(false)
  edcenso_city        edcenso_city @relation(fields: [edcenso_city_fk], references: [id])
  family              family[]
}

model attendance {
  id                  Int              @id @default(autoincrement())
  edcenso_city_fk     Int
  user_identify_fk    Int
  technician_fk       Int
  task_fk             Int
  attendance_unity_fk Int
  solicitation        String
  providence          String
  result              Result
  description         String
  date                DateTime         @default(now())
  edcenso_city        edcenso_city     @relation(fields: [edcenso_city_fk], references: [id])
  user_identify       user_identify    @relation(fields: [user_identify_fk], references: [id])
  technician          technician       @relation(fields: [technician_fk], references: [id])
  task                task             @relation(fields: [task_fk], references: [id])
  attendance_unity    attendance_unity @relation(fields: [attendance_unity_fk], references: [id])
}

model user {
  id              Int          @id @default(autoincrement())
  edcenso_city_fk Int
  name            String
  username        String       @unique
  email           String
  password        String
  role            Role         @default(TECHNICIAN)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  edcenso_city    edcenso_city @relation(fields: [edcenso_city_fk], references: [id])
  technician      technician?
}

model family_benefits {
  id              Int          @id @default(autoincrement())
  edcenso_city_fk Int
  family_fk       Int
  benefits_fk     Int
  value           Int
  edcenso_city    edcenso_city @relation(fields: [edcenso_city_fk], references: [id])
  family          family       @relation(fields: [family_fk], references: [id])
  benefits        benefits     @relation(fields: [benefits_fk], references: [id])
}

model technician {
  id              Int          @id @default(autoincrement())
  edcenso_city_fk Int
  name            String
  user_fk         Int?         @unique
  edcenso_city    edcenso_city @relation(fields: [edcenso_city_fk], references: [id])
  user            user?        @relation(fields: [user_fk], references: [id])
  attendances     attendance[]
}

model task {
  id              Int          @id @default(autoincrement())
  edcenso_city_fk Int
  name            String
  description     String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  edcenso_city    edcenso_city @relation(fields: [edcenso_city_fk], references: [id])
  attendances     attendance[]
}

model benefits {
  id              Int               @id @default(autoincrement())
  edcenso_city_fk Int
  description     String
  edcenso_city    edcenso_city      @relation(fields: [edcenso_city_fk], references: [id])
  family          family_benefits[]
  type            Benefits
}

model edcenso_uf {
  id           Int            @id @unique(map: "id")
  acronym      String         @db.VarChar(2)
  name         String         @db.VarChar(20)
  edcenso_city edcenso_city[]
  address      address[]
}

model edcenso_city {
  id               Int                @id @unique(map: "id")
  edcenso_uf_fk    Int
  name             String             @db.VarChar(50)
  cep_initial      String?            @db.VarChar(9)
  cep_final        String?            @db.VarChar(9)
  ddd1             Int?               @db.SmallInt
  ddd2             Int?               @db.SmallInt
  edcenso_uf       edcenso_uf         @relation(fields: [edcenso_uf_fk], references: [id], onUpdate: Restrict, map: "edcenso_city_fk")
  address          address[]
  family           family[]
  user             user[]
  technician       technician[]
  attendance       attendance[]
  user_identify    user_identify[]
  vulnerability    vulnerability[]
  family_benefits  family_benefits[]
  task             task[]
  benefits         benefits[]
  attendance_unity attendance_unity[]

  @@index([edcenso_uf_fk], map: "edcenso_uf_fk")
}

model attendance_unity {
  id              Int          @id @default(autoincrement())
  edcenso_city_fk Int
  name            String
  address_fk      Int          @unique
  edcenso_city    edcenso_city @relation(fields: [edcenso_city_fk], references: [id])
  address         address      @relation(fields: [address_fk], references: [id])
  family          family[]
  attendance      attendance[]
}

enum Benefits {
  PERIODICO
  EVENTUAL
}

enum Role {
  SECRETARY
  TECHNICIAN
}

enum Result {
  FINALIZADO
  PENDENTE
}

enum Kinship {
  RESPONSAVEL
  CONJUGE
  FILHO_A
  ENTEADO_A
  NETO_A
  PAI
  MAE
  SOGRO_A
  IRMAO_A
  GENRO
  NORA
  OUTRO
  NAO_PARENTE
}
