// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user_identify {
  id                Int           @id @default(autoincrement())
  vulnerability_fk  Int
  family_fk         Int?
  name              String
  surname           String?
  folder            String?
  archive           String?
  number            String?
  birthday          String?
  birth_certificate Int?
  nis               Int?
  rg_number         String?
  rg_date_emission  String?
  uf_rg             String?
  emission_rg       String?
  cpf               String
  is_deficiency     Boolean
  deficiency        String?
  mother            String
  father            String
  marital_status    String
  escolarity        String
  initial_date      String
  final_date        String?
  profission        String?
  income            Int           @default(0)
  vulnerability     vulnerability @relation(fields: [vulnerability_fk], references: [id])
  family            family?       @relation(fields: [family_fk], references: [id])
  attendances       attendance[]
}

model family {
  id                       Int               @id @default(autoincrement())
  family_representative_fk Int
  address_fk               Int
  attendance_unity_fk      Int
  address                  address           @relation(fields: [address_fk], references: [id])
  attendance_unity         attendance_unity  @relation(fields: [attendance_unity_fk], references: [id])
  user_identify            user_identify[]
  benefits                 family_benefits[]
}

model address {
  id                Int               @id @default(autoincrement())
  edcenso_uf_fk     Int
  edcenso_city_fk   Int
  address           String
  telephone         String
  reference         String?
  conditions        String
  construction_type String
  rooms             Int
  rent_value        Int
  edcenso_uf        edcenso_uf        @relation(fields: [edcenso_uf_fk], references: [id])
  edcenso_city      edcenso_city      @relation(fields: [edcenso_city_fk], references: [id])
  family            family[]
  attendance_unity  attendance_unity?
}

model vulnerability {
  id                  Int             @id @default(autoincrement())
  irregular_ocupation Boolean         @default(false)
  alone_child         Boolean         @default(false)
  dependent_elderly   Boolean         @default(false)
  unemployed          Boolean         @default(false)
  deficient           Boolean         @default(false)
  low_income          Boolean         @default(false)
  others              Boolean         @default(false)
  users_identify      user_identify[]
}

model attendance {
  id                  Int              @id @default(autoincrement())
  user_identify_fk    Int
  technician_fk       Int
  task_fk             Int              @unique
  attendance_unity_fk Int
  solicitation        String
  providence          String
  result              String
  description         String
  date                DateTime         @default(now())
  user_identify       user_identify    @relation(fields: [user_identify_fk], references: [id])
  technician          technician       @relation(fields: [technician_fk], references: [id])
  task                task             @relation(fields: [task_fk], references: [id])
  attendance_unity    attendance_unity @relation(fields: [attendance_unity_fk], references: [id])
}

model user {
  id         Int         @id @default(autoincrement())
  name       String
  username   String      @unique
  email      String
  password   String
  role       Role        @default(USER)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  technician technician?
}

model family_benefits {
  id          Int      @id @default(autoincrement())
  family_fk   Int
  benefits_fk Int
  value       Int
  family      family   @relation(fields: [family_fk], references: [id])
  benefits    benefits @relation(fields: [benefits_fk], references: [id])
}

model technician {
  id          Int          @id @default(autoincrement())
  name        String
  user_fk     Int?         @unique
  user        user?        @relation(fields: [user_fk], references: [id])
  attendances attendance[]
}

model task {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  attendances attendance?
}

model benefits {
  id          Int               @id @default(autoincrement())
  description String
  family      family_benefits[]
  type        Benefits
}

model edcenso_uf {
  id           Int            @id @unique(map: "id")
  acronym      String         @db.VarChar(2)
  name         String         @db.VarChar(20)
  edcenso_city edcenso_city[]
  address      address[]
}

model edcenso_city {
  id            Int        @id @unique(map: "id")
  edcenso_uf_fk Int
  name          String     @db.VarChar(50)
  cep_initial   String?    @db.VarChar(9)
  cep_final     String?    @db.VarChar(9)
  ddd1          Int?       @db.SmallInt
  ddd2          Int?       @db.SmallInt
  edcenso_uf    edcenso_uf @relation(fields: [edcenso_uf_fk], references: [id], onUpdate: Restrict, map: "edcenso_city_fk")
  address       address[]

  @@index([edcenso_uf_fk], map: "edcenso_uf_fk")
}

model attendance_unity {
  id         Int          @id @default(autoincrement())
  name       String
  address_fk Int          @unique
  address    address      @relation(fields: [address_fk], references: [id])
  family     family[]
  attendance attendance[]
}

enum Benefits {
  PERIODICO
  EVENTUAL
}

enum Role {
  SECRETARY
  TECHNICIAN
  USER
}
